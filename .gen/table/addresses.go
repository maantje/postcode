//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Addresses = newAddressesTable("", "addresses", "")

type addressesTable struct {
	sqlite.Table

	// Columns
	Postcode     sqlite.ColumnString
	HouseNumber  sqlite.ColumnInteger
	Addition     sqlite.ColumnString
	Extension    sqlite.ColumnString
	Municipality sqlite.ColumnString
	City         sqlite.ColumnString
	Street       sqlite.ColumnString
	LongStreet   sqlite.ColumnString
	ShortStreet  sqlite.ColumnString
	Area         sqlite.ColumnFloat
	Usage        sqlite.ColumnString
	BuiltIn      sqlite.ColumnInteger
	Latitude     sqlite.ColumnFloat
	Longitude    sqlite.ColumnFloat

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AddressesTable struct {
	addressesTable

	EXCLUDED addressesTable
}

// AS creates new AddressesTable with assigned alias
func (a AddressesTable) AS(alias string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AddressesTable with assigned schema name
func (a AddressesTable) FromSchema(schemaName string) *AddressesTable {
	return newAddressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AddressesTable with assigned table prefix
func (a AddressesTable) WithPrefix(prefix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AddressesTable with assigned table suffix
func (a AddressesTable) WithSuffix(suffix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAddressesTable(schemaName, tableName, alias string) *AddressesTable {
	return &AddressesTable{
		addressesTable: newAddressesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAddressesTableImpl("", "excluded", ""),
	}
}

func newAddressesTableImpl(schemaName, tableName, alias string) addressesTable {
	var (
		PostcodeColumn     = sqlite.StringColumn("postcode")
		HouseNumberColumn  = sqlite.IntegerColumn("house_number")
		AdditionColumn     = sqlite.StringColumn("addition")
		ExtensionColumn    = sqlite.StringColumn("extension")
		MunicipalityColumn = sqlite.StringColumn("municipality")
		CityColumn         = sqlite.StringColumn("city")
		StreetColumn       = sqlite.StringColumn("street")
		LongStreetColumn   = sqlite.StringColumn("long_street")
		ShortStreetColumn  = sqlite.StringColumn("short_street")
		AreaColumn         = sqlite.FloatColumn("area")
		UsageColumn        = sqlite.StringColumn("usage")
		BuiltInColumn      = sqlite.IntegerColumn("built_in")
		LatitudeColumn     = sqlite.FloatColumn("latitude")
		LongitudeColumn    = sqlite.FloatColumn("longitude")
		allColumns         = sqlite.ColumnList{PostcodeColumn, HouseNumberColumn, AdditionColumn, ExtensionColumn, MunicipalityColumn, CityColumn, StreetColumn, LongStreetColumn, ShortStreetColumn, AreaColumn, UsageColumn, BuiltInColumn, LatitudeColumn, LongitudeColumn}
		mutableColumns     = sqlite.ColumnList{PostcodeColumn, HouseNumberColumn, AdditionColumn, ExtensionColumn, MunicipalityColumn, CityColumn, StreetColumn, LongStreetColumn, ShortStreetColumn, AreaColumn, UsageColumn, BuiltInColumn, LatitudeColumn, LongitudeColumn}
	)

	return addressesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Postcode:     PostcodeColumn,
		HouseNumber:  HouseNumberColumn,
		Addition:     AdditionColumn,
		Extension:    ExtensionColumn,
		Municipality: MunicipalityColumn,
		City:         CityColumn,
		Street:       StreetColumn,
		LongStreet:   LongStreetColumn,
		ShortStreet:  ShortStreetColumn,
		Area:         AreaColumn,
		Usage:        UsageColumn,
		BuiltIn:      BuiltInColumn,
		Latitude:     LatitudeColumn,
		Longitude:    LongitudeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
